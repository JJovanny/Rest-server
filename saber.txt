-----------------------------------------------------------
SECTION 07->09

- mongodb : bd Norelacional 

- roboT : gestor de base de datos>mongodb

- postman : herramienta de testing, necesaria

- npm i body-parser --save : procesa la info y la serializa en un obj json
  para que sea procesada en las peticiones post

- params : parametro que se envia po url,ejem: req.params.id 

- process : es un objeto global que se actualiza dependiendo del ENV o
  el entorno donde esta corriendo

- .use() : es un middleware ya que ejecuta una funcion de un archivo o paquete

- npm start : antes debes en el package configurar para que corra

- git commit -am : "a": agregalo, "m": mensaje al commit

- produccion & desarrollo : se configura en postman: 
 * produccion : agg la url de heroku > {{url}}/usuario
 * desarrollo : agg la url de localhost > {{url}}/usuario
 
- npm i mongoose-unique-validator --save
- npm i bcrypt
* hasSync(data,'numero de veces');

- findByIdAndUpdate : actualiza el usuario con su resprectivo id

* findByIdAndUpdate(id, body, {new:true, runValidators : true}, (err, userDb) ) : 
+ id : envias el id
+ body : la data
+ {new : true} : indicas que te devuelva el valor cambiado
+ {runValidators : true} : para que ejecute las validaciones que hay en el Schema
+ (err, userDb) : el callback

- npm i underscore : = _
* pick() : trae los valores del obj filtrando lo requerido
_.pick(req.body, ['los campos que quieres permitir actualizar]);

- find() : busca todos los registros
* .limit(5) : solo de 5 en 5 registros
* .exec() : para que ejecute
* .skip(5) : salte los primeros 5 registros y despues muestre los otros 5


- findByIdAndRemove : para eliminar un userDb
* findByIdAndUpdate(id,(err, userDb) ) : 

-mLab : 
* te vs a la pagina te creas una cuenta, buscas tu region, le pones nombre a tu
base de datos

* hacemos click en la base de datos que creamos, copiamos la cadena de conexion 
03:36-102

* despues de hacer las config, vas a la pag, y das cick en users, alli le das 
agregar usuario de base da datos, le pones el nombre y la contraseña

* en make_read_only : lo dejas quieto ya que eso es para permitir si es solo
para leer o grabar

- 'mongodb://<dbuser>:<dbpassword>@ds213209.mlab.com:13209/cafe'
- 'mongodb://nombreQLeHayasPuesto:claveQueLeHayasPuesto@ds213209.mlab.com:13209/cafe'

- heroku : git push heroku master / ver la sescion anterior

-----------------------------------------------------------
SECTION 10

- tokens : es el pin de un disositivo o usuario
- variables de session : 
- jsonWebToken : se divide en tres partes :
 -header : algoritmo y tipo de token, 
 -payload: Informacion, 
 -firma : te dice si el token es valido

- Return : para que no siga ejecutando determinado codigo
- bcrypt.compareSync(body.password, user.password) :
 * para validar contraseñas encriptadas
 * el primer parametro es la contraseña que mandan y el segundo la 
   contraseña registrada

- npm i jsonwebtoken --save :
*  let token = jwt.sing({
   usuario : user,
  }, 'seed_de_desarrollo', {expiresIn : 60 * 60 * 24 * 30});

en 'seed_de_desarrollo' colocas cualquier string,
en '{expiresIn : 60 * 60 * 24 * 30}' le dices que expire en
60seg , 60min, 24hrs, 30dias = asi se le dice que expire en 30 dias


- jwt.io : puedes probar los tokens
- variables de entorno : revisar en heroku como configurar

- actualizar tokens automatico en postman : (variables de entorno automaticas)
* 10 aut de usuario -JWT - 118 

- git push origin master : subirlo a github

-----------------------------------------------------------
SECTION 11

* ingresa al link

- Google Sign-In - Página Oficial

* se debe generar un id cliente>le damos en configure a project
 ver video 124 

- path.resolve : nos arma el path (resuelve)
- npm i google-auth-library --save : 

- async : se utiliza cuando se retorna una promesa
- await : se utiliza si se hace parte del await

-----------------------------------------------------------
SECTION 12

-populate : revisa que id existen en el modelo y permetira cargar informacion
* populate('usuario', 'nombre email') : 
* 'usuario' = coleccion
* 'nombre email' = los campos que solo quiero mostrar

- sort('descripcion') : el orden en que quieres que se muestre la info

- RegExp(termino, 'i') : buscador casi inteligente al escribir una palabra
* termino : la palabra que viene por parametro
* 'i' : para que sea insensible a las mayusculas y minisculas


-----------------------------------------------------------
SECTION 13

- material icon-theme : para que las carpetas se identifiquen
- npm i --save express-fileupload : paquete para subir archivos y de mas

- si no vienen archivos
if(!req.files) return res.status(400).json({ok : false, err});
* si es solo una linea de codigo no hace falta poner las llaves {}

- mv() : es para decir donde almacenar el archivo subido
- indexOf() : para buscar en un array
- fs.existsSync(pathImg) : para saber si un archivo existe
- fs.unlinkSync(pathImg) : para borrar un archivo
- res.sendFile('./ruta/a/enviar.jpg') : enviar un archivo